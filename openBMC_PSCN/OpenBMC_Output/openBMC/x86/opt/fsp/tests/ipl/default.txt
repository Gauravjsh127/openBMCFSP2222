bootdelay=3
pcs_size=0x00400000
core_size=0x00400000
mem=726M
reset_max=3
# Currently, the crash kernel must be loaded within the first 256MB of physical
# memory, or it will die during its initialization. We're placing the crash
# environment at the end of this segment and giving it 32MB.
# Update: Until bug 89071 has been fixed, we need to bump this up to 64MB.
crashkernel=64M@192M
slramsettings=slram=p1ram,0x2d600000,+0x01500000,pcscore,0x2eb00000,+0x00f00000,tmpram,0x2fa00000,+0x00600000
# FIXME Override default module parameters with ${module_params} for modules
# loaded before access to NOR flash is available (used in /init in initramfs for
# ngfsi). This should be removed when ngfsi is no longer a dependency of sfc
# for access to the NOR flash....
setbootargs=setenv bootargs console=ttyS0,${baudrate} ethaddr=${ethaddr} eth1addr=${eth1addr} ipaddr0=${ipaddr0} ipaddr1=${ipaddr1} mem=${mem} ${slramsettings} rw log_buf_len=131072 crashkernel=${crashkernel} bootmode=${bootmode} ${module_params} ${series_bootargs}
# Note that these values must match partition block device
rootfs_name0=/dev/mmcblk0p1
rootfs_name1=/dev/mmcblk0p2
rootfs_options=rw,noatime,nodiratime,barrier=1,commit=1,data=journal,user_xattr
# The 'Device Tree Blob' has three relevant addresses:
#   1. dtbaddr: the address of the DTB in flash.
#   2. u-boot load address: where u-boot loads a working copy of the DTB (see
#      tools/flash/Rules.mk)
#   3  fdt_high: the final blob address.  u-boot will relocate its working copy
#      to this address, and it will be supplied to the kernel.  This must be in
#      the first 256MB of memory, since the kernel reads the DTB before it has
#      fully configured the TLB, and the first 256MB is the all that the early
#      kernel can "see" (see the crashkernel note above).
# Load addresses
kerneladdr=0x0e000000
initramfsaddr=0x0e300000
dtbaddr=0x0ea00000
fdt_high=0x0ea20000
# Put upper limit on where u-boot can place the initrd
# FIXME can we avoid copying this in the first place and use 'as is'?
initrd_high=0x10000000
loadkernel0=if ffs info 6; then sfc read ${kerneladdr} ${fileaddr} ${filesize}; else echo "Error locating kernel0, FIXME"; fi
loadkernel1=if ffs info 7; then sfc read ${kerneladdr} ${fileaddr} ${filesize}; else echo "Error locating kernel1, FIXME"; fi
loadinitramfs0=if ffs info 8; then sfc read ${initramfsaddr} ${fileaddr} ${filesize}; else echo "Error locating initramfs0, FIXME"; fi
loadinitramfs1=if ffs info 9; then sfc read ${initramfsaddr} ${fileaddr} ${filesize}; else echo "Error locating initramfs1, FIXME"; fi
loaddtb0=if ffs info a; then sfc read ${dtbaddr} ${fileaddr} ${filesize}; else echo "Error locating dtb0, FIXME"; fi
loaddtb1=if ffs info b; then sfc read ${dtbaddr} ${fileaddr} ${filesize}; else echo "Error locating dtb1, FIXME"; fi
bootside0=echo "Booting side 0..."; setenv bootargs ${bootargs} rootfs_name=${rootfs_name0}; run loadkernel0; run loadinitramfs0; run loaddtb0; bootstatus toggle; bootm ${kerneladdr} ${initramfsaddr} ${dtbaddr}
bootside1=echo "Booting side 1..."; setenv bootargs ${bootargs} rootfs_name=${rootfs_name1}; run loadkernel1; run loadinitramfs1; run loaddtb1; bootstatus toggle; bootm ${kerneladdr} ${initramfsaddr} ${dtbaddr}
#
# startcmd order is important
#  1. First query/set up PRA with reset information
#  2. Then check reset/reload counts, halt if exceeded
#  3. Determine OS side to boot
#  4. Attempt to boot!
startcmd=sfc speed 8; rstinfo current original; rrcount set; if itest $? -ne 0; then side set next P; terminate; fi; side dump; if side get; then run bootside0; else run bootside1; fi
#
# bootcmd order is important
#  1. Check to see if we've got a script to execute (eflash)
#  2. setup module parameters from bootenv
#  3. Configure bootargs from series partition
#  4. Set bootargs for kernel
#  5. run start command, if returns, reset fsp
bootcmd=prascript; run setmoduleparams; run set_series_bootargs; run setbootargs; printenv; run startcmd; reset
#
# Override module parameters specified in modprobe.d as access to
# flash is available when they are loaded
# FIXME ngfsi_params has ';' instead of ' ' as it's passed via the kernel
# command line and must not contain spaces.  When this is not done anymore,
# the ';' can be replaced by ' '.
ngfsi_params=linkspeed0=16;linkspeed1=1;fruspeed1=0x81,0xe9,0xef
setmoduleparams=setenv module_params ngfsi_params=${ngfsi_params}
# Note that ehci-hcd must be before ohci-hcd
extra_modules=ehci-hcd ohci-hcd pl2303 usb-storage
#
# IPL config keys
ddr_refclk=83
ddr_type=4
ddr_rlo=1
